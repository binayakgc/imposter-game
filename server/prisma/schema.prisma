// server/prisma/schema.prisma
// Complete schema with User Authentication System

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// USER AUTHENTICATION TABLES
// ========================================

model User {
  id        String   @id @default(cuid())
  username  String   @unique @db.VarChar(20)  // Unique username
  email     String?  @unique @db.VarChar(100) // Optional email
  password  String   @db.VarChar(255)         // Hashed password
  avatar    String?  @db.VarChar(10)          // Avatar emoji/ID
  isOnline  Boolean  @default(false)          // Online status
  lastSeen  DateTime @default(now())          // Last activity
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  players   Player[]   // User can be in multiple rooms (different sessions)
  sessions  UserSession[]

  @@map("users")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique @db.VarChar(255)  // JWT or session token
  socketId  String?  @unique @db.VarChar(100) // Current socket connection
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  lastUsed  DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// ========================================
// EXISTING GAME TABLES (ENHANCED)
// ========================================

model Room {
  id          String   @id @default(cuid())
  code        String   @unique @db.VarChar(6)
  name        String?  @db.VarChar(50)
  isPublic    Boolean  @default(false)
  maxPlayers  Int      @default(10)
  themeMode   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  players     Player[]
  games       Game[]

  @@map("rooms")
}

model Player {
  id        String   @id @default(cuid())
  userId    String   // Link to User account
  roomId    String
  isHost    Boolean  @default(false)
  isOnline  Boolean  @default(true)
  socketId  String?  @unique @db.VarChar(100) // Current socket (can be null when offline)
  joinedAt  DateTime @default(now())
  lastSeen  DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  // Prevent duplicate users in same room
  @@unique([userId, roomId])
  @@map("players")
}

model Game {
  id              String    @id @default(cuid())
  roomId          String
  currentWord     String?   @db.VarChar(100)
  wordGiverId     String?   // Player ID (not User ID)
  imposterId      String?   // Player ID (not User ID)
  state           GameState @default(WAITING)
  roundNumber     Int       @default(1)
  wordGiverQueue  String[]  // Array of Player IDs
  votes           Json?     // Voting data
  winner          String?   // Winner type: 'players' | 'imposter'
  timeLimit       Int?      // Time limit in seconds
  createdAt       DateTime  @default(now())
  completedAt     DateTime?

  // Relationships
  room            Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("games")
}

// ========================================
// ENUMS
// ========================================

enum GameState {
  WAITING
  WORD_SUBMISSION
  DISCUSSION
  VOTING
  RESULTS
  COMPLETED
}